'use strict';

function getResources() {
  // if calling consecutive times remove all children generated by prior request
  while (contentContainer.firstChild) {
    contentContainer.removeChild(contentContainer.firstChild);
  }

  const swapi = 'https://swapi.co/api/';
  let attr1 = document.createElement('h2');
  let attr2 = document.createElement('p');
  let attr3 = document.createElement('p');
  contentContainer.appendChild(attr1);
  contentContainer.appendChild(attr2);
  contentContainer.appendChild(attr3);

  if (resourceType.value === 'people') {
    function peopleXmlListener() {
      if (this.status < 200 || this.status >= 300) {
        let error = document.createElement('h2');
        let errorDetail = document.createElement('p');
        error.innerHTML = 'Oops! Looks like something went wrong.';
        errorDetail.innerHTML = `error ${this.status}: ${JSON.parse(this.responseText).detail}`;
        contentContainer.appendChild(error);
        error.appendChild(errorDetail);
      } else {
        attr1.innerHTML = JSON.parse(this.responseText).name;
        attr2.innerHTML = JSON.parse(this.responseText).gender;

        function speciesXmlListener() {
          attr3.innerHTML = JSON.parse(this.responseText).name;
        }

        const speciesXmlReq = new XMLHttpRequest();
        speciesXmlReq.addEventListener('load', speciesXmlListener);
        speciesXmlReq.open('GET', JSON.parse(this.responseText).species[0].toString());
        speciesXmlReq.send();
      }
    }
    const peopleXmlReq = new XMLHttpRequest();
    peopleXmlReq.addEventListener('load', peopleXmlListener);
    peopleXmlReq.open('GET', swapi + resourceType.value + '/' + resourceId.value + '/');
    peopleXmlReq.send();
  } else if (resourceType.value === 'planets') {
    function planetXmlListener() {
      if (this.status < 200 || this.status >= 300) {
        let error = document.createElement('h2');
        let errorDetail = document.createElement('p');
        error.innerHTML = 'Oops! Looks like something went wrong.';
        errorDetail.innerHTML = `error ${this.status}: ${JSON.parse(this.responseText).detail}`;
        contentContainer.appendChild(error);
        error.appendChild(errorDetail);
      } else {
        attr1.innerHTML = JSON.parse(this.responseText).name;
        attr2.innerHTML = JSON.parse(this.responseText).terrain;
        attr3.innerHTML = JSON.parse(this.responseText).population;

        let filmsArray = JSON.parse(this.responseText).films;
        const filmList = document.createElement('li');
        filmList.innerHTML = 'Referenced in:';
        contentContainer.appendChild(filmList);

        filmsArray.forEach((elem) => {
          function filmsXmlListener() {
            let attr = document.createElement('ul');
            filmList.appendChild(attr);
            attr.innerHTML = JSON.parse(this.responseText).title;
          }

          let filmsXmlReq = new XMLHttpRequest();
          filmsXmlReq.addEventListener('load', filmsXmlListener);
          filmsXmlReq.open('GET', elem);
          filmsXmlReq.send();
        });
      }
    }
    const planetXmlReq = new XMLHttpRequest();
    planetXmlReq.addEventListener('load', planetXmlListener);
    planetXmlReq.open('GET', swapi + resourceType.value + '/' + resourceId.value + '/');
    planetXmlReq.send();
  } else if (resourceType.value === 'starships') {
    // do work

    function starshipXmlListener() {
      if (this.status < 200 || this.status >= 300) {
        let error = document.createElement('h2');
        let errorDetail = document.createElement('p');
        error.innerHTML = 'Oops! Looks like something went wrong.';
        errorDetail.innerHTML = `error ${this.status}: ${JSON.parse(this.responseText).detail}`;
        contentContainer.appendChild(error);
        error.appendChild(errorDetail);
      } else {
        attr1.innerHTML = JSON.parse(this.responseText).name;
        attr2.innerHTML = JSON.parse(this.responseText).manufacturer;
        attr3.innerHTML = JSON.parse(this.responseText).starship_class;

        let filmsArray = JSON.parse(this.responseText).films;
        const filmList = document.createElement('li');
        filmList.innerHTML = 'Referenced in:';
        contentContainer.appendChild(filmList);

        filmsArray.forEach((elem) => {
          function filmsXmlListener() {
            let attr = document.createElement('ul');
            filmList.appendChild(attr);
            attr.innerHTML = JSON.parse(this.responseText).title;
          }

          let filmsXmlReq = new XMLHttpRequest();
          filmsXmlReq.addEventListener('load', filmsXmlListener);
          filmsXmlReq.open('GET', elem);
          filmsXmlReq.send();
        });
      }
    }
    const starshipXmlReq = new XMLHttpRequest();
    starshipXmlReq.addEventListener('load', starshipXmlListener);
    starshipXmlReq.open('GET', swapi + resourceType.value + '/' + resourceId.value + '/');
    starshipXmlReq.send();
  }
}

requestResourceButton.addEventListener('click', getResources);
